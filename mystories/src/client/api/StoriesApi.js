/*
 * My stories API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {Comment} from '../model/Comment';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {Speech} from '../model/Speech';
import {Story} from '../model/Story';

/**
* Stories service.
* @module api/StoriesApi
* @version v1
*/
export class StoriesApi {

    /**
    * Constructs a new StoriesApi. 
    * @alias module:api/StoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a comment
     * @param {String} storySlug 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    storiesCommentsCreateWithHttpInfo(storySlug, data) {
      let postBody = data;

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling storiesCommentsCreate");
      }


      let pathParams = {
        'story__slug': storySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/stories/{story__slug}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a comment
     * @param {String} storySlug 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    storiesCommentsCreate(storySlug, data) {
      return this.storiesCommentsCreateWithHttpInfo(storySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a comment
     * @param {Number} id A unique integer value identifying this comment.
     * @param {String} storySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    storiesCommentsDeleteWithHttpInfo(id, storySlug) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storiesCommentsDelete");
      }

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsDelete");
      }


      let pathParams = {
        'id': id,
        'story__slug': storySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/stories/{story__slug}/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a comment
     * @param {Number} id A unique integer value identifying this comment.
     * @param {String} storySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    storiesCommentsDelete(id, storySlug) {
      return this.storiesCommentsDeleteWithHttpInfo(id, storySlug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the comments
     * @param {String} storySlug 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    storiesCommentsListWithHttpInfo(storySlug, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsList");
      }


      let pathParams = {
        'story__slug': storySlug
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/stories/{story__slug}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the comments
     * @param {String} storySlug 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    storiesCommentsList(storySlug, opts) {
      return this.storiesCommentsListWithHttpInfo(storySlug, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a comment
     * @param {Number} id A unique integer value identifying this comment.
     * @param {String} storySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    storiesCommentsReadWithHttpInfo(id, storySlug) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storiesCommentsRead");
      }

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsRead");
      }


      let pathParams = {
        'id': id,
        'story__slug': storySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/stories/{story__slug}/comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a comment
     * @param {Number} id A unique integer value identifying this comment.
     * @param {String} storySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    storiesCommentsRead(id, storySlug) {
      return this.storiesCommentsReadWithHttpInfo(id, storySlug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a story
     * @param {String} title 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.bodyMarkdown 
     * @param {module:model/String} opts.language 
     * @param {File} opts.image 
     * @param {String} opts.description 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
     */
    storiesCreateWithHttpInfo(title, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling storiesCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': opts['body'],
        'body_markdown': opts['bodyMarkdown'],
        'language': opts['language'],
        'image': opts['image'],
        'description': opts['description'],
        'title': title
      };

      let authNames = ['api_key'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Story;

      return this.apiClient.callApi(
        '/stories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a story
     * @param {String} title 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.bodyMarkdown 
     * @param {module:model/String} opts.language 
     * @param {File} opts.image 
     * @param {String} opts.description 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
     */
    storiesCreate(title, opts) {
      return this.storiesCreateWithHttpInfo(title, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a story
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    storiesDeleteWithHttpInfo(slug) {
      let postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling storiesDelete");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/stories/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a story
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    storiesDelete(slug) {
      return this.storiesDeleteWithHttpInfo(slug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a favorite to a story
     * @param {String} storySlug 
     * @param {module:model/Story} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
     */
    storiesFavoriteCreateWithHttpInfo(storySlug, data) {
      let postBody = data;

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesFavoriteCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling storiesFavoriteCreate");
      }


      let pathParams = {
        'story__slug': storySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Story;

      return this.apiClient.callApi(
        '/stories/{story__slug}/favorite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a favorite to a story
     * @param {String} storySlug 
     * @param {module:model/Story} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
     */
    storiesFavoriteCreate(storySlug, data) {
      return this.storiesFavoriteCreateWithHttpInfo(storySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a favorite to a story
     * @param {String} storySlug 
     * @param {module:model/Story} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
     */
    storiesFavoriteDeleteWithHttpInfo(storySlug, data) {
      let postBody = data;

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesFavoriteDelete");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling storiesFavoriteDelete");
      }


      let pathParams = {
        'story__slug': storySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Story;

      return this.apiClient.callApi(
        '/stories/{story__slug}/favorite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a favorite to a story
     * @param {String} storySlug 
     * @param {module:model/Story} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
     */
    storiesFavoriteDelete(storySlug, data) {
      return this.storiesFavoriteDeleteWithHttpInfo(storySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * General ViewSet description
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    storiesFeedListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/stories/feed/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * General ViewSet description
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    storiesFeedList(opts) {
      return this.storiesFeedListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create speech to a story
     * @param {String} storySlug 
     * @param {module:model/Speech} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Speech} and HTTP response
     */
    storiesGttsCreateWithHttpInfo(storySlug, data) {
      let postBody = data;

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesGttsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling storiesGttsCreate");
      }


      let pathParams = {
        'story__slug': storySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Speech;

      return this.apiClient.callApi(
        '/stories/{story__slug}/gtts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create speech to a story
     * @param {String} storySlug 
     * @param {module:model/Speech} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Speech}
     */
    storiesGttsCreate(storySlug, data) {
      return this.storiesGttsCreateWithHttpInfo(storySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} storySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Speech} and HTTP response
     */
    storiesGttsReadWithHttpInfo(storySlug) {
      let postBody = null;

      // verify the required parameter 'storySlug' is set
      if (storySlug === undefined || storySlug === null) {
        throw new Error("Missing the required parameter 'storySlug' when calling storiesGttsRead");
      }


      let pathParams = {
        'story__slug': storySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Speech;

      return this.apiClient.callApi(
        '/stories/{story__slug}/gtts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} storySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Speech}
     */
    storiesGttsRead(storySlug) {
      return this.storiesGttsReadWithHttpInfo(storySlug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the stories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    storiesListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/stories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the stories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    storiesList(opts) {
      return this.storiesListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Patch a story
     * @param {String} slug 
     * @param {String} title 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.bodyMarkdown 
     * @param {module:model/String} opts.language 
     * @param {File} opts.image 
     * @param {String} opts.description 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
     */
    storiesPartialUpdateWithHttpInfo(slug, title, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling storiesPartialUpdate");
      }

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling storiesPartialUpdate");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': opts['body'],
        'body_markdown': opts['bodyMarkdown'],
        'language': opts['language'],
        'image': opts['image'],
        'description': opts['description'],
        'title': title
      };

      let authNames = ['api_key'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Story;

      return this.apiClient.callApi(
        '/stories/{slug}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Patch a story
     * @param {String} slug 
     * @param {String} title 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.bodyMarkdown 
     * @param {module:model/String} opts.language 
     * @param {File} opts.image 
     * @param {String} opts.description 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
     */
    storiesPartialUpdate(slug, title, opts) {
      return this.storiesPartialUpdateWithHttpInfo(slug, title, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a story
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
     */
    storiesReadWithHttpInfo(slug) {
      let postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling storiesRead");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Story;

      return this.apiClient.callApi(
        '/stories/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a story
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
     */
    storiesRead(slug) {
      return this.storiesReadWithHttpInfo(slug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a story
     * @param {String} slug 
     * @param {String} title 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.bodyMarkdown 
     * @param {module:model/String} opts.language 
     * @param {File} opts.image 
     * @param {String} opts.description 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
     */
    storiesUpdateWithHttpInfo(slug, title, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling storiesUpdate");
      }

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling storiesUpdate");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': opts['body'],
        'body_markdown': opts['bodyMarkdown'],
        'language': opts['language'],
        'image': opts['image'],
        'description': opts['description'],
        'title': title
      };

      let authNames = ['api_key'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Story;

      return this.apiClient.callApi(
        '/stories/{slug}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a story
     * @param {String} slug 
     * @param {String} title 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {String} opts.bodyMarkdown 
     * @param {module:model/String} opts.language 
     * @param {File} opts.image 
     * @param {String} opts.description 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
     */
    storiesUpdate(slug, title, opts) {
      return this.storiesUpdateWithHttpInfo(slug, title, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
