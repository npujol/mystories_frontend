/*
 * My stories API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

import { ApiClient } from "../ApiClient";
import { Comment } from '../model/Comment';
import { Story } from '../model/Story';
import { InlineResponse200 } from '../model/InlineResponse200';
import { InlineResponse2001 } from '../model/InlineResponse2001';

/**
* Stories service.
* @module api/StoriesApi
* @version 1
*/
export class StoriesApi {

  /**
  * Constructs a new StoriesApi. 
  * @alias module:api/StoriesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }



  /**
   * 
   * @param {String} storySlug 
   * @param {module:model/Comment} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
   */
  storiesCommentsCreateWithHttpInfo(storySlug, data) {
    let postBody = data;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsCreate");
    }

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling storiesCommentsCreate");
    }


    let pathParams = {
      'story__slug': storySlug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Comment;

    return this.apiClient.callApi(
      '/stories/{story__slug}/comments', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * 
   * @param {String} storySlug 
   * @param {module:model/Comment} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
   */
  storiesCommentsCreate(storySlug, data) {
    return this.storiesCommentsCreateWithHttpInfo(storySlug, data)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * 
   * @param {String} storySlug 
   * @param {Number} id A unique integer value identifying this comment.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  storiesCommentsDeleteWithHttpInfo(storySlug, id) {
    let postBody = null;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsDelete");
    }

    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling storiesCommentsDelete");
    }


    let pathParams = {
      'story__slug': storySlug,
      'id': id
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = null;

    return this.apiClient.callApi(
      '/stories/{story__slug}/comments/{id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * 
   * @param {String} storySlug 
   * @param {Number} id A unique integer value identifying this comment.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  storiesCommentsDelete(storySlug, id) {
    return this.storiesCommentsDeleteWithHttpInfo(storySlug, id)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * 
   * @param {String} storySlug 
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
   */
  storiesCommentsListWithHttpInfo(storySlug, opts) {
    opts = opts || {};
    let postBody = null;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsList");
    }


    let pathParams = {
      'story__slug': storySlug
    };
    let queryParams = {
      'limit': opts['limit'],
      'offset': opts['offset']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = InlineResponse2001;

    return this.apiClient.callApi(
      '/stories/{story__slug}/comments', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * 
   * @param {String} storySlug 
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
   */
  storiesCommentsList(storySlug, opts) {
    return this.storiesCommentsListWithHttpInfo(storySlug, opts)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * 
   * @param {String} storySlug 
   * @param {Number} id A unique integer value identifying this comment.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
   */
  storiesCommentsReadWithHttpInfo(storySlug, id) {
    let postBody = null;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesCommentsRead");
    }

    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling storiesCommentsRead");
    }


    let pathParams = {
      'story__slug': storySlug,
      'id': id
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Comment;

    return this.apiClient.callApi(
      '/stories/{story__slug}/comments/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * 
   * @param {String} storySlug 
   * @param {Number} id A unique integer value identifying this comment.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
   */
  storiesCommentsRead(storySlug, id) {
    return this.storiesCommentsReadWithHttpInfo(storySlug, id)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Create an story
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
   */
  storiesCreateWithHttpInfo(data) {
    let postBody = data;

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling storiesCreate");
    }


    let pathParams = {
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Story;

    return this.apiClient.callApi(
      '/stories', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Create an story
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
   */
  storiesCreate(data) {
    return this.storiesCreateWithHttpInfo(data)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Delete an story
   * @param {String} slug 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  storiesDeleteWithHttpInfo(slug) {
    let postBody = null;

    // verify the required parameter 'slug' is set
    if (slug === undefined || slug === null) {
      throw new Error("Missing the required parameter 'slug' when calling storiesDelete");
    }


    let pathParams = {
      'slug': slug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = null;

    return this.apiClient.callApi(
      '/stories/{slug}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Delete an story
   * @param {String} slug 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  storiesDelete(slug) {
    return this.storiesDeleteWithHttpInfo(slug)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Add a favorite to an story
   * @param {String} storySlug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
   */
  storiesFavoriteCreateWithHttpInfo(storySlug, data) {
    let postBody = data;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesFavoriteCreate");
    }

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling storiesFavoriteCreate");
    }


    let pathParams = {
      'story__slug': storySlug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Story;

    return this.apiClient.callApi(
      '/stories/{story__slug}/favorite/', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Add a favorite to an story
   * @param {String} storySlug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
   */
  storiesFavoriteCreate(storySlug, data) {
    return this.storiesFavoriteCreateWithHttpInfo(storySlug, data)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Remove a favorite to an story
   * @param {String} storySlug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
   */
  storiesFavoriteDeleteWithHttpInfo(storySlug, data) {
    let postBody = data;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesFavoriteDelete");
    }

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling storiesFavoriteDelete");
    }


    let pathParams = {
      'story__slug': storySlug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Story;

    return this.apiClient.callApi(
      '/stories/{story__slug}/favorite/', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Remove a favorite to an story
   * @param {String} storySlug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
   */
  storiesFavoriteDelete(storySlug, data) {
    return this.storiesFavoriteDeleteWithHttpInfo(storySlug, data)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * 
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */
  storiesFeedListWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;


    let pathParams = {
    };
    let queryParams = {
      'limit': opts['limit'],
      'offset': opts['offset']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = InlineResponse200;

    return this.apiClient.callApi(
      '/stories/feed/', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * 
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
   */
  storiesFeedList(opts) {
    return this.storiesFeedListWithHttpInfo(opts)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Create speech to an story
   * @param {String} storySlug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
   */
  storiesGttsCreateWithHttpInfo(storySlug, data) {
    let postBody = data;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesGttsCreate");
    }

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling storiesGttsCreate");
    }


    let pathParams = {
      'story__slug': storySlug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Story;

    return this.apiClient.callApi(
      '/stories/{story__slug}/gtts', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Create speech to an story
   * @param {String} storySlug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
   */
  storiesGttsCreate(storySlug, data) {
    return this.storiesGttsCreateWithHttpInfo(storySlug, data)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * 
   * @param {String} storySlug 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  storiesGttsListWithHttpInfo(storySlug) {
    let postBody = null;

    // verify the required parameter 'storySlug' is set
    if (storySlug === undefined || storySlug === null) {
      throw new Error("Missing the required parameter 'storySlug' when calling storiesGttsList");
    }


    let pathParams = {
      'story__slug': storySlug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = null;

    return this.apiClient.callApi(
      '/stories/{story__slug}/gtts', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * 
   * @param {String} storySlug 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  storiesGttsList(storySlug) {
    return this.storiesGttsListWithHttpInfo(storySlug)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * List the stories
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */
  storiesListWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;


    let pathParams = {
    };
    let queryParams = {
      'limit': opts['limit'],
      'offset': opts['offset']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = InlineResponse200;

    return this.apiClient.callApi(
      '/stories', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * List the stories
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
   */
  storiesList(opts) {
    return this.storiesListWithHttpInfo(opts)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Patch an story
   * @param {String} slug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
   */
  storiesPartialUpdateWithHttpInfo(slug, data) {
    let postBody = data;

    // verify the required parameter 'slug' is set
    if (slug === undefined || slug === null) {
      throw new Error("Missing the required parameter 'slug' when calling storiesPartialUpdate");
    }

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling storiesPartialUpdate");
    }


    let pathParams = {
      'slug': slug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Story;

    return this.apiClient.callApi(
      '/stories/{slug}', 'PATCH',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Patch an story
   * @param {String} slug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
   */
  storiesPartialUpdate(slug, data) {
    return this.storiesPartialUpdateWithHttpInfo(slug, data)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Retrieve an story
   * @param {String} slug 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
   */
  storiesReadWithHttpInfo(slug) {
    let postBody = null;

    // verify the required parameter 'slug' is set
    if (slug === undefined || slug === null) {
      throw new Error("Missing the required parameter 'slug' when calling storiesRead");
    }


    let pathParams = {
      'slug': slug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Story;

    return this.apiClient.callApi(
      '/stories/{slug}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Retrieve an story
   * @param {String} slug 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
   */
  storiesRead(slug) {
    return this.storiesReadWithHttpInfo(slug)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


  /**
   * Update an story
   * @param {String} slug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Story} and HTTP response
   */
  storiesUpdateWithHttpInfo(slug, data) {
    let postBody = data;

    // verify the required parameter 'slug' is set
    if (slug === undefined || slug === null) {
      throw new Error("Missing the required parameter 'slug' when calling storiesUpdate");
    }

    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error("Missing the required parameter 'data' when calling storiesUpdate");
    }


    let pathParams = {
      'slug': slug
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['api_key'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Story;

    return this.apiClient.callApi(
      '/stories/{slug}', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * Update an story
   * @param {String} slug 
   * @param {module:model/Story} data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Story}
   */
  storiesUpdate(slug, data) {
    return this.storiesUpdateWithHttpInfo(slug, data)
      .then(function (response_and_data) {
        return response_and_data.data;
      });
  }


}
