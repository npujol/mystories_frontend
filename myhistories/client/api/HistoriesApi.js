/*
 * My histories API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {Comment} from '../model/Comment';
import {History} from '../model/History';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2001} from '../model/InlineResponse2001';

/**
* Histories service.
* @module api/HistoriesApi
* @version 1
*/
export class HistoriesApi {

    /**
    * Constructs a new HistoriesApi. 
    * @alias module:api/HistoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 
     * @param {String} historySlug 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    historiesCommentsCreateWithHttpInfo(historySlug, data) {
      let postBody = data;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesCommentsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling historiesCommentsCreate");
      }


      let pathParams = {
        'history__slug': historySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/histories/{history__slug}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} historySlug 
     * @param {module:model/Comment} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    historiesCommentsCreate(historySlug, data) {
      return this.historiesCommentsCreateWithHttpInfo(historySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} historySlug 
     * @param {Number} id A unique integer value identifying this comment.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    historiesCommentsDeleteWithHttpInfo(historySlug, id) {
      let postBody = null;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesCommentsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling historiesCommentsDelete");
      }


      let pathParams = {
        'history__slug': historySlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/histories/{history__slug}/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} historySlug 
     * @param {Number} id A unique integer value identifying this comment.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    historiesCommentsDelete(historySlug, id) {
      return this.historiesCommentsDeleteWithHttpInfo(historySlug, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} historySlug 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    historiesCommentsListWithHttpInfo(historySlug, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesCommentsList");
      }


      let pathParams = {
        'history__slug': historySlug
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/histories/{history__slug}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} historySlug 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    historiesCommentsList(historySlug, opts) {
      return this.historiesCommentsListWithHttpInfo(historySlug, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} historySlug 
     * @param {Number} id A unique integer value identifying this comment.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    historiesCommentsReadWithHttpInfo(historySlug, id) {
      let postBody = null;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesCommentsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling historiesCommentsRead");
      }


      let pathParams = {
        'history__slug': historySlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/histories/{history__slug}/comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} historySlug 
     * @param {Number} id A unique integer value identifying this comment.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    historiesCommentsRead(historySlug, id) {
      return this.historiesCommentsReadWithHttpInfo(historySlug, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an history
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/History} and HTTP response
     */
    historiesCreateWithHttpInfo(data) {
      let postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling historiesCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = History;

      return this.apiClient.callApi(
        '/histories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an history
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/History}
     */
    historiesCreate(data) {
      return this.historiesCreateWithHttpInfo(data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an history
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    historiesDeleteWithHttpInfo(slug) {
      let postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling historiesDelete");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/histories/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an history
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    historiesDelete(slug) {
      return this.historiesDeleteWithHttpInfo(slug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a favorite to an history
     * @param {String} historySlug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/History} and HTTP response
     */
    historiesFavoriteCreateWithHttpInfo(historySlug, data) {
      let postBody = data;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesFavoriteCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling historiesFavoriteCreate");
      }


      let pathParams = {
        'history__slug': historySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = History;

      return this.apiClient.callApi(
        '/histories/{history__slug}/favorite/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a favorite to an history
     * @param {String} historySlug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/History}
     */
    historiesFavoriteCreate(historySlug, data) {
      return this.historiesFavoriteCreateWithHttpInfo(historySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a favorite to an history
     * @param {String} historySlug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/History} and HTTP response
     */
    historiesFavoriteDeleteWithHttpInfo(historySlug, data) {
      let postBody = data;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesFavoriteDelete");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling historiesFavoriteDelete");
      }


      let pathParams = {
        'history__slug': historySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = History;

      return this.apiClient.callApi(
        '/histories/{history__slug}/favorite/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a favorite to an history
     * @param {String} historySlug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/History}
     */
    historiesFavoriteDelete(historySlug, data) {
      return this.historiesFavoriteDeleteWithHttpInfo(historySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    historiesFeedListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/histories/feed/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    historiesFeedList(opts) {
      return this.historiesFeedListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create speech to an history
     * @param {String} historySlug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/History} and HTTP response
     */
    historiesGttsCreateWithHttpInfo(historySlug, data) {
      let postBody = data;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesGttsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling historiesGttsCreate");
      }


      let pathParams = {
        'history__slug': historySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = History;

      return this.apiClient.callApi(
        '/histories/{history__slug}/gtts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create speech to an history
     * @param {String} historySlug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/History}
     */
    historiesGttsCreate(historySlug, data) {
      return this.historiesGttsCreateWithHttpInfo(historySlug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 
     * @param {String} historySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    historiesGttsListWithHttpInfo(historySlug) {
      let postBody = null;

      // verify the required parameter 'historySlug' is set
      if (historySlug === undefined || historySlug === null) {
        throw new Error("Missing the required parameter 'historySlug' when calling historiesGttsList");
      }


      let pathParams = {
        'history__slug': historySlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/histories/{history__slug}/gtts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 
     * @param {String} historySlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    historiesGttsList(historySlug) {
      return this.historiesGttsListWithHttpInfo(historySlug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the histories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    historiesListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/histories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the histories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    historiesList(opts) {
      return this.historiesListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Patch an history
     * @param {String} slug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/History} and HTTP response
     */
    historiesPartialUpdateWithHttpInfo(slug, data) {
      let postBody = data;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling historiesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling historiesPartialUpdate");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = History;

      return this.apiClient.callApi(
        '/histories/{slug}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Patch an history
     * @param {String} slug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/History}
     */
    historiesPartialUpdate(slug, data) {
      return this.historiesPartialUpdateWithHttpInfo(slug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an history
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/History} and HTTP response
     */
    historiesReadWithHttpInfo(slug) {
      let postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling historiesRead");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = History;

      return this.apiClient.callApi(
        '/histories/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve an history
     * @param {String} slug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/History}
     */
    historiesRead(slug) {
      return this.historiesReadWithHttpInfo(slug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an history
     * @param {String} slug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/History} and HTTP response
     */
    historiesUpdateWithHttpInfo(slug, data) {
      let postBody = data;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling historiesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling historiesUpdate");
      }


      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = History;

      return this.apiClient.callApi(
        '/histories/{slug}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an history
     * @param {String} slug 
     * @param {module:model/History} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/History}
     */
    historiesUpdate(slug, data) {
      return this.historiesUpdateWithHttpInfo(slug, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
